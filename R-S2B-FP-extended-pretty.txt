
################################################################################
################################# Load packages ##################################
################################################################################

## -----------------------------------------------------------------------------
# Set Java environment for rcdk  
Sys.setenv(JAVA_HOME = "C:/Users/madhu/OneDrive/Desktop/Madhurun/Downloads/jdk-21.0.5+11")

# Import necessary libraries  
library("rJava")
library("rcdk")
library("fingerprint")
library("readxl")
library("readr")
library("dplyr")

#' 

################################################################################
######################## Load and preprocess S2B dataset #########################
################################################################################

## -----------------------------------------------------------------------------
# Load S2B dataset from the CSV file
s2b_file <- "datasets/Antibacterial/S2B_dataset_csv.csv"

# Read the CSV file, skipping the first row as it contains header names as data
# Read the CSV file while ensuring proper handling of quoted fields
s2b_data <- read_csv(
  s2b_file,
  skip = 1,  # Skip the header row if needed
  quote = '"', # To ensure molecule names are processed correctly
  col_names = TRUE,
  show_col_types = FALSE
)


# Inspect and handle problematic rows
parsing_problems <- problems(s2b_data)
if (nrow(parsing_problems) > 0) {
  cat("Parsing issues detected. Inspecting problematic rows...\n")
  View(parsing_problems)
}

# Rename columns to meaningful names based on the dataset structure
colnames(s2b_data)[1:3] <- c("Broad_ID", "Name", "SMILES")

# Clean the dataset by filtering out invalid or problematic rows
s2b_data <- s2b_data %>%
  filter(
    # Valid SMILES
    !is.na(SMILES) & SMILES != "",
    # Valid Broad_ID
    !is.na(Broad_ID) & Broad_ID != "",
    # Valid Name
    !is.na(Name) & Name != ""
  )

# Verify the cleaned data structure
cat("Dataset structure after cleaning:\n")
str(s2b_data)

# Retain only the relevant columns for fingerprint generation
s2b_data <- s2b_data %>%
  select(Broad_ID, Name, SMILES)

# Export cleaned dataset for verification
write_csv(s2b_data, "datasets/Antibacterial/S2B_cleaned.csv")

# Check the final cleaned dataset
s2b_cleaned <- read_csv("datasets/Antibacterial/S2B_cleaned.csv",
                        quote = '"', 
                        show_col_types = FALSE,
                        col_names = TRUE,
                        )

cat("Final cleaned dataset structure:\n")
str(s2b_cleaned)
summary(s2b_cleaned)

#' 

################################################################################
######## Test run for one molecule to ensure fingerprint generation works ########
################################################################################

## -----------------------------------------------------------------------------
i <- 10  # Example molecule index

# Parse SMILES string from column C (SMILES)  
mol <- parse.smiles(s2b_cleaned$SMILES[i])

# Generate fingerprint (e.g., extended type)  
FP <- as.character(get.fingerprint(mol[[1]], type = "extended", fp.mode = "bit", verbose = FALSE))

# Convert fingerprint to binary bits  
FP <- unlist(strsplit(FP, split = ""))  # Flatten the fingerprint into a vector
FP <- as.numeric(FP)  # Convert to numeric
FP <- t(as.data.frame(FP))  # Transpose to ensure one row

# Check number of fingerprint bits  
FPn <- ncol(FP)  
cat("Fingerprint bits:", FPn, "\n")
str(FP)


################################################################################
################### Open CSV for writing and write header row ####################
################################################################################

## -----------------------------------------------------------------------------
# Open an output CSV file ("S2B-FP-extended.csv") for writing fingerprints
output_file <- file("datasets/Antibacterial/S2B-FP-extended.csv", "w")

# Write header row (include Broad_ID, Name, and fingerprint columns)  
cat(sprintf("Broad_ID,Name,"), file = output_file)

# Add fingerprint column names (e.g., FP1, FP2, ..., FPn)  
for (i in 1:(FPn - 1)) {
  cat(sprintf("FP%d,", i), file = output_file)
}
cat(sprintf("FP%d\n", FPn), file = output_file)

#' 

################################################################################
##################### Create fingerprints for each molecule ######################
################################################################################

## -----------------------------------------------------------------------------
# Process each molecule in the dataset  
for (i in 1:nrow(s2b_cleaned)) {
  # Parse SMILES string  
  mol <- parse.smiles(s2b_cleaned$SMILES[i])
  
  # Check if SMILES parsing is successful  
  if (!is.null(mol[[1]])) {
    # Generate fingerprint  
    FP <- as.character(get.fingerprint(mol[[1]], type = "extended", fp.mode = "bit", verbose = FALSE))
    FP <- unlist(strsplit(FP, split = ""))
    FP <- as.numeric(FP)  # Convert to numeric
    
    # Ensure the fingerprint length matches the expected number of bits  
    if (length(FP) == FPn) {
      # Extract Broad_ID, Name for this molecule  
      broad_id <- s2b_cleaned$Broad_ID[i]
      name <- s2b_cleaned$Name[i]
      
      # Ensure fields with special characters are quoted
      name <- sprintf('"%s"', name)  # Quote the Name field
      broad_id <- sprintf('"%s"', broad_id)  # Quote the Broad_ID field
      
      # Write the data for this molecule to the output file  
      cat(sprintf(
        "%s,%s,%s\n", 
        broad_id,
        name, 
        paste(FP, collapse = ",")
      ), file = output_file)
      
      # Print progress to console  
      cat("Processed molecule:", i, "\n")
      flush.console()
    } else {
      # Log a warning if fingerprint length is incorrect
      cat(sprintf("Warning: Incorrect fingerprint length for molecule %d (%s)\n", i, name))
    }
  } else {
    # Log a warning if SMILES parsing fails
    cat(sprintf("Warning: Failed to parse SMILES for molecule %d (%s)\n", i, s2b_cleaned$Name[i]))
  }
}


#' 
## -----------------------------------------------------------------------------
# Check if the output file was successfully created
file.exists("datasets/Antibacterial/S2B-FP-extended.csv")


#' 
## -----------------------------------------------------------------------------
# Export script to text file  
library(knitr)
purl("scripts/fingerprints/R-S2B-FP-extended.Rmd", output = "scripts_txt/fingerprints/R-S2B-FP-extended.R", documentation = 0)

