
################################################################################
################################# Load packages ##################################
################################################################################

## -----------------------------------------------------------------------------
# Load Required Libraries 
library(dplyr)
library(readr)
library(rcdk)
remove.packages("rcdk")  # used because pubchem fingerprint generation seems to fail sometimes
install.packages("rcdk")
library(fingerprint)
Sys.setenv(JAVA_HOME = "C:/Users/madhu/OneDrive/Desktop/Madhurun/Downloads/jdk-21.0.5+11")

#' 

################################################################################
### Generate fingerprints for compounds in the cleaned neuroprotective dataset ###
################################################################################

## -----------------------------------------------------------------------------
# Load the final, cleaned neuroprotective dataset
neuro_data <- read_csv("outputs/cleaned_CHEMBLcompounds_neuroprotectives_final.csv") %>%
  select(Chembl_ID, SMILES, Actual_activity) %>%  # Keep only relevant columns
  filter(!is.na(SMILES) & SMILES != "")          # Remove invalid SMILES

# Define Fingerprint Types to generate 
fingerprint_types <- c("pubchem", "maccs", "extended")

# Generate Fingerprints for each fingerprint type
for (fp_type in fingerprint_types) {
  
  # Define output file for the current fingerprint type
  output_file <- file(sprintf("outputs/neuroprotective_%s_fingerprints.csv", fp_type), "w")
  
   # Generate a test fingerprint to set column headers
  test_mol <- parse.smiles(neuro_data$SMILES[1])
  
  if (!is.null(test_mol[[1]])) {
    test_FP <- as.character(get.fingerprint(test_mol[[1]], type = fp_type, fp.mode = 'bit', verbose = FALSE))
    test_FP <- strsplit(test_FP, split = "")
    test_FP <- as.data.frame(test_FP)
    test_FP <- t(test_FP)

    # Write header row
    cat("Chembl_ID,Actual_Activity,", file = output_file)
    
    # Write fingerprint bit columns
    for (i in 1:(ncol(test_FP) - 1)) {
      cat(sprintf("FP%d,", i), file = output_file)
    }
    cat(sprintf("FP%d\n", ncol(test_FP)), file = output_file)
  }
  
  # Loop through all compounds in the neuroprotective dataset
  for (i in 1:nrow(neuro_data)) {
    # Parse the SMILES string to obtain a molecule object
    mol <- parse.smiles(neuro_data$SMILES[i])
    if (!is.null(mol[[1]])) {
      
     # Generate fingerprint
      FP <- as.character(get.fingerprint(mol[[1]], type = fp_type, fp.mode = 'bit', verbose = FALSE))
      FP <- strsplit(FP, split = "")
      FP <- as.data.frame(FP)
      FP <- t(FP)
      
      # Extract Chembl_ID and Actual_Activity from the dataset
      chembl_id <- neuro_data$Chembl_ID[i]
      actual_activity <- neuro_data$Actual_activity[i]
      
      # Write fingerprint data along with chembl_id and actual activity
      cat(sprintf("%s,%s,%s\n", chembl_id, actual_activity, paste(FP[, 1:ncol(FP)], collapse = ",")), file = output_file)
    }
  }
  
  # Close the output file connection
  close(output_file)
  
  cat(sprintf("Fingerprint generation complete for fingerprint type: %s\n", fp_type))
}


#' 
